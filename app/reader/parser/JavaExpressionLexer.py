# Generated from JavaExpression.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,340,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
        1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,4,27,164,8,27,11,27,12,27,165,1,27,1,27,1,28,1,28,5,28,
        172,8,28,10,28,12,28,175,9,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,3,30,186,8,30,1,31,1,31,1,31,3,31,191,8,31,1,31,5,31,194,
        8,31,10,31,12,31,197,9,31,3,31,199,8,31,1,32,1,32,1,32,3,32,204,
        8,32,1,32,4,32,207,8,32,11,32,12,32,208,1,33,1,33,3,33,213,8,33,
        1,33,4,33,216,8,33,11,33,12,33,217,1,34,1,34,1,34,3,34,223,8,34,
        1,34,4,34,226,8,34,11,34,12,34,227,1,35,1,35,3,35,232,8,35,1,36,
        4,36,235,8,36,11,36,12,36,236,1,36,3,36,240,8,36,1,36,1,36,5,36,
        244,8,36,10,36,12,36,247,9,36,1,36,3,36,250,8,36,1,36,3,36,253,8,
        36,1,36,3,36,256,8,36,1,37,1,37,1,37,4,37,261,8,37,11,37,12,37,262,
        1,37,3,37,266,8,37,1,37,5,37,269,8,37,10,37,12,37,272,9,37,1,37,
        1,37,5,37,276,8,37,10,37,12,37,279,9,37,1,37,3,37,282,8,37,1,37,
        3,37,285,8,37,1,38,1,38,3,38,289,8,38,1,38,3,38,292,8,38,1,38,4,
        38,295,8,38,11,38,12,38,296,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,3,39,308,8,39,1,40,1,40,1,40,3,40,313,8,40,1,40,1,40,1,41,
        1,41,1,41,5,41,320,8,41,10,41,12,41,323,9,41,1,41,1,41,1,42,1,42,
        1,42,3,42,330,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,0,65,0,67,0,69,
        0,71,32,73,0,75,0,77,0,79,33,81,34,83,35,85,0,87,0,89,0,1,0,15,3,
        0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,48,55,2,0,66,
        66,98,98,1,0,48,49,4,0,68,68,70,70,100,100,102,102,2,0,69,69,101,
        101,2,0,43,43,45,45,1,0,48,57,4,0,10,10,13,13,39,39,92,92,4,0,10,
        10,13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,364,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,71,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,1,91,1,0,0,0,3,93,1,0,0,0,5,95,1,0,0,0,7,97,1,0,
        0,0,9,99,1,0,0,0,11,101,1,0,0,0,13,103,1,0,0,0,15,105,1,0,0,0,17,
        107,1,0,0,0,19,109,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,
        1,0,0,0,27,117,1,0,0,0,29,119,1,0,0,0,31,122,1,0,0,0,33,125,1,0,
        0,0,35,127,1,0,0,0,37,129,1,0,0,0,39,132,1,0,0,0,41,135,1,0,0,0,
        43,138,1,0,0,0,45,141,1,0,0,0,47,152,1,0,0,0,49,155,1,0,0,0,51,158,
        1,0,0,0,53,160,1,0,0,0,55,163,1,0,0,0,57,169,1,0,0,0,59,176,1,0,
        0,0,61,185,1,0,0,0,63,198,1,0,0,0,65,200,1,0,0,0,67,210,1,0,0,0,
        69,219,1,0,0,0,71,231,1,0,0,0,73,234,1,0,0,0,75,257,1,0,0,0,77,286,
        1,0,0,0,79,307,1,0,0,0,81,309,1,0,0,0,83,316,1,0,0,0,85,329,1,0,
        0,0,87,331,1,0,0,0,89,338,1,0,0,0,91,92,5,91,0,0,92,2,1,0,0,0,93,
        94,5,93,0,0,94,4,1,0,0,0,95,96,5,40,0,0,96,6,1,0,0,0,97,98,5,41,
        0,0,98,8,1,0,0,0,99,100,5,44,0,0,100,10,1,0,0,0,101,102,5,46,0,0,
        102,12,1,0,0,0,103,104,5,43,0,0,104,14,1,0,0,0,105,106,5,45,0,0,
        106,16,1,0,0,0,107,108,5,42,0,0,108,18,1,0,0,0,109,110,5,47,0,0,
        110,20,1,0,0,0,111,112,5,37,0,0,112,22,1,0,0,0,113,114,5,38,0,0,
        114,24,1,0,0,0,115,116,5,124,0,0,116,26,1,0,0,0,117,118,5,94,0,0,
        118,28,1,0,0,0,119,120,5,60,0,0,120,121,5,60,0,0,121,30,1,0,0,0,
        122,123,5,62,0,0,123,124,5,62,0,0,124,32,1,0,0,0,125,126,5,62,0,
        0,126,34,1,0,0,0,127,128,5,60,0,0,128,36,1,0,0,0,129,130,5,62,0,
        0,130,131,5,61,0,0,131,38,1,0,0,0,132,133,5,60,0,0,133,134,5,61,
        0,0,134,40,1,0,0,0,135,136,5,61,0,0,136,137,5,61,0,0,137,42,1,0,
        0,0,138,139,5,33,0,0,139,140,5,61,0,0,140,44,1,0,0,0,141,142,5,105,
        0,0,142,143,5,110,0,0,143,144,5,115,0,0,144,145,5,116,0,0,145,146,
        5,97,0,0,146,147,5,110,0,0,147,148,5,99,0,0,148,149,5,101,0,0,149,
        150,5,111,0,0,150,151,5,102,0,0,151,46,1,0,0,0,152,153,5,38,0,0,
        153,154,5,38,0,0,154,48,1,0,0,0,155,156,5,124,0,0,156,157,5,124,
        0,0,157,50,1,0,0,0,158,159,5,63,0,0,159,52,1,0,0,0,160,161,5,58,
        0,0,161,54,1,0,0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,165,1,0,0,
        0,165,163,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,168,6,27,0,
        0,168,56,1,0,0,0,169,173,7,1,0,0,170,172,7,2,0,0,171,170,1,0,0,0,
        172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,58,1,0,0,0,175,
        173,1,0,0,0,176,177,5,110,0,0,177,178,5,117,0,0,178,179,5,108,0,
        0,179,180,5,108,0,0,180,60,1,0,0,0,181,186,3,63,31,0,182,186,3,65,
        32,0,183,186,3,67,33,0,184,186,3,69,34,0,185,181,1,0,0,0,185,182,
        1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,0,186,62,1,0,0,0,187,199,5,
        48,0,0,188,195,2,49,57,0,189,191,5,95,0,0,190,189,1,0,0,0,190,191,
        1,0,0,0,191,192,1,0,0,0,192,194,2,48,57,0,193,190,1,0,0,0,194,197,
        1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,199,1,0,0,0,197,195,
        1,0,0,0,198,187,1,0,0,0,198,188,1,0,0,0,199,64,1,0,0,0,200,201,5,
        48,0,0,201,206,7,3,0,0,202,204,5,95,0,0,203,202,1,0,0,0,203,204,
        1,0,0,0,204,205,1,0,0,0,205,207,7,4,0,0,206,203,1,0,0,0,207,208,
        1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,66,1,0,0,0,210,215,5,
        48,0,0,211,213,5,95,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,
        1,0,0,0,214,216,7,5,0,0,215,212,1,0,0,0,216,217,1,0,0,0,217,215,
        1,0,0,0,217,218,1,0,0,0,218,68,1,0,0,0,219,220,5,48,0,0,220,225,
        7,6,0,0,221,223,5,95,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,
        1,0,0,0,224,226,7,7,0,0,225,222,1,0,0,0,226,227,1,0,0,0,227,225,
        1,0,0,0,227,228,1,0,0,0,228,70,1,0,0,0,229,232,3,73,36,0,230,232,
        3,75,37,0,231,229,1,0,0,0,231,230,1,0,0,0,232,72,1,0,0,0,233,235,
        2,48,57,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,
        1,0,0,0,237,255,1,0,0,0,238,240,5,95,0,0,239,238,1,0,0,0,239,240,
        1,0,0,0,240,252,1,0,0,0,241,245,5,46,0,0,242,244,2,48,57,0,243,242,
        1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,249,
        1,0,0,0,247,245,1,0,0,0,248,250,3,77,38,0,249,248,1,0,0,0,249,250,
        1,0,0,0,250,253,1,0,0,0,251,253,3,77,38,0,252,241,1,0,0,0,252,251,
        1,0,0,0,253,256,1,0,0,0,254,256,7,8,0,0,255,239,1,0,0,0,255,254,
        1,0,0,0,256,74,1,0,0,0,257,258,5,48,0,0,258,260,7,3,0,0,259,261,
        7,4,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,
        1,0,0,0,263,270,1,0,0,0,264,266,5,95,0,0,265,264,1,0,0,0,265,266,
        1,0,0,0,266,267,1,0,0,0,267,269,7,4,0,0,268,265,1,0,0,0,269,272,
        1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,284,1,0,0,0,272,270,
        1,0,0,0,273,277,5,46,0,0,274,276,7,4,0,0,275,274,1,0,0,0,276,279,
        1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,281,1,0,0,0,279,277,
        1,0,0,0,280,282,3,77,38,0,281,280,1,0,0,0,281,282,1,0,0,0,282,285,
        1,0,0,0,283,285,3,77,38,0,284,273,1,0,0,0,284,283,1,0,0,0,285,76,
        1,0,0,0,286,288,7,9,0,0,287,289,7,10,0,0,288,287,1,0,0,0,288,289,
        1,0,0,0,289,294,1,0,0,0,290,292,5,95,0,0,291,290,1,0,0,0,291,292,
        1,0,0,0,292,293,1,0,0,0,293,295,7,11,0,0,294,291,1,0,0,0,295,296,
        1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,78,1,0,0,0,298,299,5,
        116,0,0,299,300,5,114,0,0,300,301,5,117,0,0,301,308,5,101,0,0,302,
        303,5,102,0,0,303,304,5,97,0,0,304,305,5,108,0,0,305,306,5,115,0,
        0,306,308,5,101,0,0,307,298,1,0,0,0,307,302,1,0,0,0,308,80,1,0,0,
        0,309,312,5,39,0,0,310,313,3,85,42,0,311,313,8,12,0,0,312,310,1,
        0,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,315,5,39,0,0,315,82,1,
        0,0,0,316,321,5,34,0,0,317,320,3,85,42,0,318,320,8,13,0,0,319,317,
        1,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,
        1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,5,34,0,0,325,84,
        1,0,0,0,326,327,5,92,0,0,327,330,7,14,0,0,328,330,3,87,43,0,329,
        326,1,0,0,0,329,328,1,0,0,0,330,86,1,0,0,0,331,332,5,92,0,0,332,
        333,5,117,0,0,333,334,3,89,44,0,334,335,3,89,44,0,335,336,3,89,44,
        0,336,337,3,89,44,0,337,88,1,0,0,0,338,339,7,4,0,0,339,90,1,0,0,
        0,34,0,165,173,185,190,195,198,203,208,212,217,222,227,231,236,239,
        245,249,252,255,262,265,270,277,281,284,288,291,296,307,312,319,
        321,329,1,6,0,0
    ]

class JavaExpressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    LPAREN = 3
    RPAREN = 4
    COMMA = 5
    DOT = 6
    PLUS = 7
    MINUS = 8
    MULT = 9
    DIV = 10
    MOD = 11
    BITWISE_AND = 12
    BITWISE_OR = 13
    XOR = 14
    SHIFT_LEFT = 15
    SHIFT_RIGHT = 16
    GREATER_THAN = 17
    LESS_THAN = 18
    GREATER_THAN_OR_EQUAL_TO = 19
    LESS_THAN_OR_EQUAL_TO = 20
    EQUALS = 21
    NOT_EQUALS = 22
    INSTANCEOF = 23
    LOGICAL_AND = 24
    LOGICAL_OR = 25
    QUESTION_MARK = 26
    COLON = 27
    WHITESPACE = 28
    IDENTIFIER = 29
    NULL_LITERAL = 30
    INTEGER_LITERAL = 31
    FLOATING_POINT_LITERAL = 32
    BOOLEAN_LITERAL = 33
    CHARACTER_LITERAL = 34
    STRING_LITERAL = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'('", "')'", "','", "'.'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'&'", "'|'", "'^'", "'<<'", "'>>'", "'>'", "'<'", 
            "'>='", "'<='", "'=='", "'!='", "'instanceof'", "'&&'", "'||'", 
            "'?'", "':'", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "COMMA", "DOT", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "BITWISE_AND", "BITWISE_OR", "XOR", "SHIFT_LEFT", 
            "SHIFT_RIGHT", "GREATER_THAN", "LESS_THAN", "GREATER_THAN_OR_EQUAL_TO", 
            "LESS_THAN_OR_EQUAL_TO", "EQUALS", "NOT_EQUALS", "INSTANCEOF", 
            "LOGICAL_AND", "LOGICAL_OR", "QUESTION_MARK", "COLON", "WHITESPACE", 
            "IDENTIFIER", "NULL_LITERAL", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", 
            "BOOLEAN_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL" ]

    ruleNames = [ "T__0", "T__1", "LPAREN", "RPAREN", "COMMA", "DOT", "PLUS", 
                  "MINUS", "MULT", "DIV", "MOD", "BITWISE_AND", "BITWISE_OR", 
                  "XOR", "SHIFT_LEFT", "SHIFT_RIGHT", "GREATER_THAN", "LESS_THAN", 
                  "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN_OR_EQUAL_TO", "EQUALS", 
                  "NOT_EQUALS", "INSTANCEOF", "LOGICAL_AND", "LOGICAL_OR", 
                  "QUESTION_MARK", "COLON", "WHITESPACE", "IDENTIFIER", 
                  "NULL_LITERAL", "INTEGER_LITERAL", "DECIMAL_LITERAL", 
                  "HEX_LITERAL", "OCTAL_LITERAL", "BINARY_LITERAL", "FLOATING_POINT_LITERAL", 
                  "DECIMAL_FLOATING_POINT_LITERAL", "HEX_FLOATING_POINT_LITERAL", 
                  "EXPONENT", "BOOLEAN_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
                  "EscapeSequence", "UnicodeEscape", "HexDigit" ]

    grammarFileName = "JavaExpression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


